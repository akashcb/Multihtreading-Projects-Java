package com.neu.edu;

/**
 *  @author Akash Bhatia
 */


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;



public class AuctionServer
{
	/**
	 * Singleton: the following code makes the server a Singleton. You should
	 * not edit the code in the following noted section.
	 * 
	 * For test purposes, we made the constructor protected. 
	 */

	/* Singleton: Begin code that you SHOULD NOT CHANGE! */
	protected AuctionServer()
	{
	}

	private static AuctionServer instance = new AuctionServer();

	public static AuctionServer getInstance()
	{
		return instance;
	}

	/* Singleton: End code that you SHOULD NOT CHANGE! */





	/* Statistic variables and server constants: Begin code you should likely leave alone. */


	/**
	 * Server statistic variables and access methods:
	 */
	private int soldItemsCount = 0;
	private int revenue = 0;

	public int soldItemsCount()
	{
		return this.soldItemsCount;
	}

	public int revenue()
	{
		return this.revenue;
	}



	/**
	 * Server restriction constants:
	 */
	public static final int maxBidCount = 10; // The maximum number of bids at any given time for a buyer.
	public static final int maxSellerItems = 20; // The maximum number of items that a seller can submit at any given time.
	public static final int serverCapacity = 80; // The maximum number of active items at a given time.


	/* Statistic variables and server constants: End code you should likely leave alone. */



	/**
	 * Some variables we think will be of potential use as you implement the server...
	 */

	// List of items currently up for bidding (will eventually remove things that have expired).
	private List<Item> itemsUpForBidding = new ArrayList<Item>();


	// The last value used as a listing ID.  We'll assume the first thing added gets a listing ID of 0.
	private int lastListingID = -1; 

	// List of item IDs and actual items.  This is a running list with everything ever added to the auction.
	private HashMap<Integer, Item> itemsAndIDs = new HashMap<Integer, Item>();

	// List of itemIDs and the highest bid for each item.  This is a running list with everything ever added to the auction.
	private HashMap<Integer, Integer> highestBids = new HashMap<Integer, Integer>();

	// List of itemIDs and the person who made the highest bid for each item.   This is a running list with everything ever bid upon.
	private HashMap<Integer, String> highestBidders = new HashMap<Integer, String>(); 

	// List of sellers and how many items they have currently up for bidding.
	private HashMap<String, Integer> itemsPerSeller = new HashMap<String, Integer>();

	// List of buyers and how many items on which they are currently bidding.
	private HashMap<String, Integer> itemsPerBuyer = new HashMap<String, Integer>();

	private HashMap<String, Integer> sellersItemPriceMoreThan75 = new HashMap<String, Integer>();

	private HashMap<String, Integer> sellersItemNotSold = new HashMap<String, Integer>();

	//private HashSet<String> blackListedBidders = new HashSet<String>();

	// Object used for instance synchronization if you need to do it at some point 
	// since as a good practice we don't use synchronized (this) if we are doing internal
	// synchronization.
	//
	// private Object instanceLock = new Object(); 

	//Akash- Question on above comment. What does it mean exactly?


	/*
	 *  The code from this point forward can and should be changed to correctly and safely 
	 *  implement the methods as needed to create a working multi-threaded server for the 
	 *  system.  If you need to add Object instances here to use for locking, place a comment
	 *  with them saying what they represent.  Note that if they just represent one structure
	 *  then you should probably be using that structure's intrinsic lock.
	 */


	/**
	 * Attempt to submit an <code>Item</code> to the auction
	 * @param sellerName Name of the <code>Seller</code>
	 * @param itemName Name of the <code>Item</code>
	 * @param lowestBiddingPrice Opening price
	 * @param biddingDurationMs Bidding duration in milliseconds
	 * @return A positive, unique listing ID if the <code>Item</code> listed successfully, otherwise -1
	 */
	public synchronized int submitItem(String sellerName, String itemName, int lowestBiddingPrice, int biddingDurationMs)
	{
		// TODO: IMPLEMENT CODE HERE
		// Some reminders:
		//   Make sure there's room in the auction site.
		//   If the seller is a new one, add them to the list of sellers.
		//   If the seller has too many items up for bidding, don't let them add this one.
		//   Don't forget to increment the number of things the seller has currently listed.
		int listId = -1;
		//		synchronized(this)
		//		{
		boolean sellerStatusDisQualified = false;
		int currentSellerItemCountPriceMoreThan75 = 0;
		if(itemsAndIDs.size() < serverCapacity)
		{
			if(itemsPerSeller.get(sellerName) == null)
			{
				itemsPerSeller.put(sellerName, 0);
			}
			
			//check item price more than 75 condition
			if(sellersItemPriceMoreThan75.get(sellerName) == null)
			{
				sellersItemPriceMoreThan75.put(sellerName, 0);
			}
			if(lowestBiddingPrice > 75)
			{
				//System.out.println("75 spotted");
				currentSellerItemCountPriceMoreThan75 = sellersItemPriceMoreThan75.get(sellerName);
			
				if(currentSellerItemCountPriceMoreThan75 >= 3)
				{
					sellerStatusDisQualified = true;
				}
			}
			
			//check seller items not getting sold condition
			if(sellersItemNotSold.get(sellerName) == null)
			{
				sellersItemNotSold.put(sellerName, 0);
			}
			if(sellersItemNotSold.get(sellerName) > 5)
				sellerStatusDisQualified = true;
			
			if(itemsPerSeller.get(sellerName) < maxSellerItems && (lowestBiddingPrice >= 0 && lowestBiddingPrice <= 99) && !sellerStatusDisQualified)
			{

				lastListingID += 1;
				listId = lastListingID;
				Item i = new Item(sellerName, itemName, listId, lowestBiddingPrice, biddingDurationMs);

				itemsAndIDs.put(listId, i);
				itemsUpForBidding.add(i);
				
				//increasing sellers item count
				int currentItemCount = itemsPerSeller.get(sellerName).intValue();
				currentItemCount++;
				itemsPerSeller.put(sellerName, currentItemCount);
				
				//increasing sellers count if product price > 75
				if(lowestBiddingPrice > 75)
				{
					
					sellersItemPriceMoreThan75.put(sellerName, currentSellerItemCountPriceMoreThan75++);
					if(currentSellerItemCountPriceMoreThan75 > 1)
						System.out.println("Seller: "+sellerName + " 75count: "+currentSellerItemCountPriceMoreThan75);
				}

			}
			else
			{
				
				if(itemsPerSeller.get(sellerName) > maxSellerItems)
					System.out.println("Max seller items exceded: "+sellerName + " current size: "+itemsPerSeller.get(sellerName));
				else if(lowestBiddingPrice <= 0 && lowestBiddingPrice >= 99)
					System.out.println("Lowest bidding price inappropriate: "+lowestBiddingPrice);
				else if(sellerStatusDisQualified)
					System.out.println("Seller disqualified: "+sellerName);
				else
					System.out.println("Rejected: seller item count"+itemsPerSeller.get(sellerName)+" lbp:"+ lowestBiddingPrice+" dq:"+sellerStatusDisQualified);
			}
				//System.out.println("Listing cannot be posted!!");


		}

		return listId;
	}



	/**
	 * Get all <code>Items</code> active in the auction
	 * @return A copy of the <code>List</code> of <code>Items</code>
	 */
	public synchronized List<Item> getItems()
	{
		// TODO: IMPLEMENT CODE HERE
		// Some reminders:
		// Don't forget that whatever you return is now outside of your control.
		return new ArrayList<Item>(itemsUpForBidding);
	}


	/**
	 * Attempt to submit a bid for an <code>Item</code>
	 * @param bidderName Name of the <code>Bidder</code>
	 * @param listingID Unique ID of the <code>Item</code>
	 * @param biddingAmount Total amount to bid
	 * @return True if successfully bid, false otherwise
	 */
	public synchronized boolean submitBid(String bidderName, int listingID, int biddingAmount)
	{
		// TODO: IMPLEMENT CODE HERE
		// Some reminders:
		//   See if the item exists.
		//   See if it can be bid upon.
		//   See if this bidder has too many items in their bidding list.
		//   Get current bidding info.
		//   See if they already hold the highest bid.
		//   See if the new bid isn't better than the existing/opening bid floor.
		//   Decrement the former winning bidder's count
		//   Put your bid in place
		boolean status = false;
		//Item item = itemsAndIDs.get(listingID);
		
		if(!itemsPerBuyer.containsKey(bidderName))
		{
			itemsPerBuyer.put(bidderName, 0);
		}
		
		if(itemsAndIDs.containsKey(listingID) && itemsAndIDs.get(listingID).biddingOpen() && itemsPerBuyer.get(bidderName) < maxBidCount)
		{
			Item item = itemsAndIDs.get(listingID);
			int currentBid = 0;
			boolean hasOldBidder = false;
			String oldBidder = "";
			if(highestBids.containsKey(listingID))
			{
				currentBid = highestBids.get(listingID);
			}
			else
				currentBid = item.lowestBiddingPrice();
			
			if(highestBidders.containsKey(listingID))
			{
				hasOldBidder = true;
				oldBidder = highestBidders.get(listingID);
			}

			if(biddingAmount > currentBid)
			{
				if(hasOldBidder)
				{
					//decrementing old bidders count
					int currentBiddersBidCount = itemsPerBuyer.get(oldBidder);
					currentBiddersBidCount = currentBiddersBidCount - 1;
					itemsPerBuyer.put(oldBidder, currentBiddersBidCount);
				}
				//Place the bid
				highestBidders.put(listingID, bidderName);
				highestBids.put(listingID, biddingAmount);
				int oldItemsPerBuyerCount = itemsPerBuyer.get(bidderName);
				oldItemsPerBuyerCount++;
				itemsPerBuyer.put(bidderName, oldItemsPerBuyerCount);
				status = true;
				System.out.println("Bid submitted by bidder: "+bidderName+" amount: "+biddingAmount+" item: "+item);
			}
		}
		return status;
	}


	/**
	 * Check the status of a <code>Bidder</code>'s bid on an <code>Item</code>
	 * @param bidderName Name of <code>Bidder</code>
	 * @param listingID Unique ID of the <code>Item</code>
	 * @return 1 (success) if bid is over and this <code>Bidder</code> has won<br>
	 * 2 (open) if this <code>Item</code> is still up for auction<br>
	 * 3 (failed) If this <code>Bidder</code> did not win or the <code>Item</code> does not exist
	 */
	public synchronized int checkBidStatus(String bidderName, int listingID)
	{
		// TODO: IMPLEMENT CODE HERE
		// Some reminders:
		//   If the bidding is closed, clean up for that item.
		//     Remove item from the list of things up for bidding.
		//     Decrease the count of items being bid on by the winning bidder if there was any...
		//     Update the number of open bids for this seller
		int statusResult = 0;
		boolean biddingOpen = false;
		Item i = null;

		if(itemsAndIDs.containsKey(listingID))
		{
			i = itemsAndIDs.get(listingID);
			biddingOpen = i.biddingOpen();


			if(itemsUpForBidding.contains(i))
			{
				if(!biddingOpen)
				{
					//bidding closed
					if(highestBidders.containsKey(listingID) && highestBidders.get(listingID).equalsIgnoreCase(bidderName))
					{
						//Success
						statusResult = 1;
						int highestBiddingAmount = highestBids.get(listingID);
						//updating stats
						revenue += highestBiddingAmount;
						soldItemsCount++;
						
						itemsUpForBidding.remove(i);
						int buyerItemCount = itemsPerBuyer.get(bidderName);
						itemsPerBuyer.put(bidderName, buyerItemCount--);
						int sellerItemCount = itemsPerSeller.get(i.seller());
						itemsPerSeller.put(i.seller(), sellerItemCount--);
						if(i.lowestBiddingPrice() > 75)
						{
							//System.out.println("Count lowered!!");
							int currentCount = sellersItemPriceMoreThan75.get(i.seller());
							sellersItemPriceMoreThan75.put(i.seller(), currentCount--);
						}
					}
					else if(!highestBidders.containsKey(listingID))
					{
						statusResult = 3;
						//Raise sellers flag indicating item was not sold
						int currentCount = 0;
						if(sellersItemNotSold.containsKey(i.seller()))
						{
							currentCount = sellersItemNotSold.get(i.seller());
						}
						sellersItemNotSold.put(i.seller(), currentCount++);
						itemsUpForBidding.remove(i);
						int buyerItemCount = itemsPerBuyer.get(bidderName);
						itemsPerBuyer.put(bidderName, buyerItemCount--);
						int sellerItemCount = itemsPerSeller.get(i.seller());
						itemsPerSeller.put(i.seller(), sellerItemCount--);
						if(i.lowestBiddingPrice() > 75)
						{
							int currentCountItem = sellersItemPriceMoreThan75.get(i.seller());
							sellersItemPriceMoreThan75.put(i.seller(), currentCountItem--);
						}
					}
					else
						statusResult = 3;
				}
				else
				{
					//bidding open
					statusResult = 2; 
				}
			}
			//ItemsUpForBidding does not contains listingID
			else
				statusResult = 3;
		}
		else
		{
			//There is no such item
			statusResult = 3;
		}

		return statusResult;
	}

	/**
	 * Check the current bid for an <code>Item</code>
	 * @param listingID Unique ID of the <code>Item</code>
	 * @return The highest bid so far or the opening price if no bid has been made,
	 * -1 if no <code>Item</code> exists
	 */
	public synchronized int itemPrice(int listingID)
	{
		// TODO: IMPLEMENT CODE HERE
		Item i = itemsAndIDs.get(listingID);
		int highestBid = -1;
		if(i != null)
		{
			highestBid = i.lowestBiddingPrice();
			if(highestBids.containsKey(listingID))
				highestBid = highestBids.get(listingID);
		}
		return highestBid;
	}

	/**
	 * Check whether an <code>Item</code> has been bid upon yet
	 * @param listingID Unique ID of the <code>Item</code>
	 * @return True if there is no bid or the <code>Item</code> does not exist, false otherwise
	 */
	public synchronized Boolean itemUnbid(int listingID)
	{
		// TODO: IMPLEMENT CODE HERE
		Item i = itemsAndIDs.get(listingID);
		boolean bidUpon = true;
		if(i != null)
		{
			bidUpon = true;
			if(highestBids.containsKey(listingID))
				bidUpon = false;
		}
		return bidUpon;
	}




	//To be removed by akash:
	public int getSoldItemsCount() {
		return soldItemsCount;
	}

	public void setSoldItemsCount(int soldItemsCount) {
		this.soldItemsCount = soldItemsCount;
	}

	public int getRevenue() {
		return revenue;
	}

	public void setRevenue(int revenue) {
		this.revenue = revenue;
	}

	public List<Item> getItemsUpForBidding() {
		return itemsUpForBidding;
	}

	public void setItemsUpForBidding(List<Item> itemsUpForBidding) {
		this.itemsUpForBidding = itemsUpForBidding;
	}

	public int getLastListingID() {
		return lastListingID;
	}

	public void setLastListingID(int lastListingID) {
		this.lastListingID = lastListingID;
	}

	public HashMap<Integer, Item> getItemsAndIDs() {
		return itemsAndIDs;
	}

	public void setItemsAndIDs(HashMap<Integer, Item> itemsAndIDs) {
		this.itemsAndIDs = itemsAndIDs;
	}

	public HashMap<Integer, Integer> getHighestBids() {
		return highestBids;
	}

	public void setHighestBids(HashMap<Integer, Integer> highestBids) {
		this.highestBids = highestBids;
	}

	public HashMap<Integer, String> getHighestBidders() {
		return highestBidders;
	}

	public void setHighestBidders(HashMap<Integer, String> highestBidders) {
		this.highestBidders = highestBidders;
	}

	public HashMap<String, Integer> getItemsPerSeller() {
		return itemsPerSeller;
	}

	public void setItemsPerSeller(HashMap<String, Integer> itemsPerSeller) {
		this.itemsPerSeller = itemsPerSeller;
	}

	public HashMap<String, Integer> getItemsPerBuyer() {
		return itemsPerBuyer;
	}

	public void setItemsPerBuyer(HashMap<String, Integer> itemsPerBuyer) {
		this.itemsPerBuyer = itemsPerBuyer;
	}

	public static int getMaxbidcount() {
		return maxBidCount;
	}

	public static int getMaxselleritems() {
		return maxSellerItems;
	}

	public static int getServercapacity() {
		return serverCapacity;
	}

	public HashMap<String, Integer> getSellersItemPriceMoreThan75() {
		return sellersItemPriceMoreThan75;
	}

	public void setSellersItemPriceMoreThan75(HashMap<String, Integer> sellersItemPriceMoreThan75) {
		this.sellersItemPriceMoreThan75 = sellersItemPriceMoreThan75;
	}

	public HashMap<String, Integer> getSellersItemNotSold() {
		return sellersItemNotSold;
	}

	public void setSellersItemNotSold(HashMap<String, Integer> sellersItemNotSold) {
		this.sellersItemNotSold = sellersItemNotSold;
	}
	
	

}

